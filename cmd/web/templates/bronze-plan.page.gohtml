{{template "base" .***REMOVED******REMOVED***

{{define "title"***REMOVED******REMOVED***
    Bronze Plan
{{end***REMOVED******REMOVED***

{{define "content"***REMOVED******REMOVED***
{{$widget := index .Data "widget"***REMOVED******REMOVED***
    <h2 class="mt-3 text-center">Bronze Plan: {{formatCurrency $widget.Price***REMOVED******REMOVED***</h2>
    <hr>
    <div id="card-messages" class="alert alert-danger text-center d-none"></div>
    <form 
        action="/payment-succeeded" 
        method="post"
        name="charge_form"
        id="charge_form"
        class="d-block needs-validation charge-form mb-5"
        autocomplete="off" 
        novalidate="">

        <input type="hidden" name="product_id" id="product_id" value="{{$widget.ID***REMOVED******REMOVED***" />
        <input type="hidden" name="amount" id="amount" value="{{$widget.Price***REMOVED******REMOVED***" />
        <h3 class="mt-2 text-center mb-3">{{$widget.Name***REMOVED******REMOVED***: {{formatCurrency $widget.Price***REMOVED******REMOVED***</h3>
        <p>{{$widget.Description***REMOVED******REMOVED***</p>


        <div class="mb-3">
            <label for="first-name" class="form-label">First name</label>
            <input type="text" class="form-control" id="first-name" name="first_name"
                required="" autocomplete="first-name-new">
        </div>

         <div class="mb-3">
            <label for="last-name" class="form-label">Last name</label>
            <input type="text" class="form-control" id="last-name" name="last_name"
                required="" autocomplete="last-name-new">
        </div>

        <div class="mb-3">
            <label for="cardholder-email" class="form-label">Email</label>
            <input type="email" class="form-control" id="cardholder-email" name="email"
                required="" autocomplete="cardholder-email-new">
        </div>

        <div class="mb-3">
            <label for="cardholder-name" class="form-label">Name of card</label>
            <input type="text" class="form-control" id="cardholder-name" name="cardholder_name"
                required="" autocomplete="cardholder-name-new">
        </div>

        <div class="mb-3">
            <label for="card-element" class="form-label">Credit card</label>
            <div id="card-element" class="form-control" ></div>
            <div id="card-errors" class="alert-danger text-center" role="alert"></div>
            <div id="card-success" class="alert-success text-center" role="alert"></div>
        </div>

        <a id="pay-button" href="javascript:void(0***REMOVED***" class="btn btn-primary" onclick="val(***REMOVED***">Pay {{formatCurrency $widget.Price***REMOVED******REMOVED***/month</a>
        <div id="processing-payment" class="text-center d-none">
            <div class="spinner-border text-primary" role="status" >
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>

        <input type="hidden" name="payment_intent" id="payment_intent" />
        <input type="hidden" name="payment_method" id="payment_method" />
        <input type="hidden" name="payment_amount" id="payment_amount" />
        <input type="hidden" name="payment_currency" id="payment_currency" />
    </form>
{{end***REMOVED******REMOVED***
{{define "js"***REMOVED******REMOVED***
{{$widget := index .Data "widget"***REMOVED******REMOVED***
<script src="https://js.stripe.com/v3/"></script>
<script>
    let card;
    let stripe;
    const cardMessages = document.getElementById("card-messages"***REMOVED***
    const payButton = document.getElementById("pay-button"***REMOVED***
    const processing = document.getElementById("processing-payment"***REMOVED***

    stripe = Stripe("{{.StripePublishableKey***REMOVED******REMOVED***"***REMOVED***;
   
    function hidePayButton(***REMOVED*** {
        payButton.classList.add("d-none"***REMOVED***
        processing.classList.remove("d-none"***REMOVED***
    ***REMOVED***

    function showPayButton(***REMOVED*** {
        payButton.classList.remove("d-none"***REMOVED***
        processing.classList.add("d-none"***REMOVED***
    ***REMOVED***

    function showCardError(msg***REMOVED*** {
        cardMessages.classList.add("alert-danger"***REMOVED***;
        cardMessages.classList.remove("alert-success"***REMOVED***;
        cardMessages.classList.remove("d-none"***REMOVED***;
        cardMessages.innerText = msg;
    ***REMOVED***

    function showCardSuccess(***REMOVED*** {
        cardMessages.classList.remove("alert-danger"***REMOVED***;
        cardMessages.classList.add("alert-success"***REMOVED***;
        cardMessages.classList.remove("d-none"***REMOVED***;
        cardMessages.innerText = "Transaction successful";
    ***REMOVED***  

    function val(***REMOVED***{
        let form = document.getElementById("charge_form"***REMOVED***
        if(form.checkValidity(***REMOVED*** == false***REMOVED*** {
            this.event.preventDefault(***REMOVED***;
            this.event.stopPropagation(***REMOVED***;
            form.classList.add("was-validated"***REMOVED***;
            return;
        ***REMOVED***
        form.classList.add("was-validated"***REMOVED***
        hidePayButton(***REMOVED***

        let amountToCharge = document.getElementById("amount"***REMOVED***.value;

        stripe.createPaymentMethod({
            type: 'card',
            card: card,
            billing_details: {
                email: document.getElementById("cardholder-email"***REMOVED***.value,
            ***REMOVED***,
        ***REMOVED******REMOVED***.then(stripePaymentMethodHandler***REMOVED***;
    ***REMOVED***

    function stripePaymentMethodHandler(result***REMOVED*** {
        if(result.error***REMOVED***{
            showCardError(result.error.message***REMOVED***;
        ***REMOVED*** else{
            let payload = {
                product_id: document.getElementById("product_id"***REMOVED***.value,
                plan: '{{$widget.PlanID***REMOVED******REMOVED***',
                payment_method: result.paymentMethod.id,
                email: document.getElementById("cardholder-email"***REMOVED***.value,
                last_four: result.paymentMethod.card.last4,
                card_brand: result.paymentMethod.card.brand,
                exp_month: result.paymentMethod.card.exp_month,
                exp_year: result.paymentMethod.card.exp_year,
                first_name: document.getElementById("first-name"***REMOVED***.value,
                last_name: document.getElementById("last-name"***REMOVED***.value,
                amount:  document.getElementById("amount"***REMOVED***.value,
            ***REMOVED***

            const requestOptions = {
                method: 'post',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                ***REMOVED***,
                body: JSON.stringify(payload***REMOVED***
            ***REMOVED***

            fetch("{{.API***REMOVED******REMOVED***/api/create-customer-and-subscribe-to-plan", requestOptions***REMOVED***
                .then(response => response.text(***REMOVED******REMOVED***
                .then(data => {
                    console.log(data***REMOVED***
                    processing.classList.add("d-none"***REMOVED***
                    showCardSuccess(***REMOVED***;
                    sessionStorage.first_name = document.getElementById("first-name"***REMOVED***.value
                    sessionStorage.last_name = document.getElementById("last-name"***REMOVED***.value
                    sessionStorage.amount = "{{formatCurrency $widget.Price***REMOVED******REMOVED***"
                    sessionStorage.last_four = result.paymentMethod.card.last4

                    location.href = "/receipt/bronze"
                ***REMOVED******REMOVED***
        ***REMOVED***
    ***REMOVED***

    (function(***REMOVED***{
        // create strpie & elements
        const elements =stripe.elements(***REMOVED***;
        const style = {
            base: {
                fontSize: '16px',
                lineHeight: '24px'
            ***REMOVED***
        ***REMOVED***

        // create card entry
        card = elements.create('card', {
            style: style,
            hidePostalCode: true
        ***REMOVED******REMOVED***
        card.mount("#card-element"***REMOVED***

        // check for input errors
        card.addEventListener('change', function(event***REMOVED*** {
            var displayError = document.getElementById("card-errors"***REMOVED***;
            if(event.error***REMOVED*** {
                displayError.classList.remove('d-none'***REMOVED***;
                displayError.textContent = event.error.message;
            ***REMOVED*** else {
                displayError.classList.add('d-none'***REMOVED***;
                displayError.textContent = '';
            ***REMOVED***
        ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***(***REMOVED***;

</script>
{{end***REMOVED******REMOVED***